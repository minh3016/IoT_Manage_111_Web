version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cooling-manager-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cooling_manager}
      POSTGRES_USER: ${POSTGRES_USER:-cooling_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cooling_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - cooling-manager-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cooling_user} -d ${POSTGRES_DB:-cooling_manager}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cooling-manager-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - cooling-manager-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.node
      target: production
    container_name: cooling-manager-backend-prod
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://${POSTGRES_USER:-cooling_user}:${POSTGRES_PASSWORD:-cooling_password}@postgres:5432/${POSTGRES_DB:-cooling_manager}?schema=public
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://your-domain.com}
      LOG_LEVEL: ${LOG_LEVEL:-warn}
      ENABLE_SENSOR_SIMULATION: ${ENABLE_SENSOR_SIMULATION:-false}
      ENABLE_DEBUG_ROUTES: false
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cooling-manager-network
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend Web Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        VITE_API_URL: ${VITE_API_URL:-https://api.your-domain.com/api}
        VITE_SOCKET_URL: ${VITE_SOCKET_URL:-https://api.your-domain.com}
        VITE_APP_NAME: ${VITE_APP_NAME:-Cooling Manager}
        VITE_APP_VERSION: ${VITE_APP_VERSION:-1.0.0}
    container_name: cooling-manager-frontend-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - cooling-manager-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Reverse Proxy (Alternative configuration)
  nginx:
    image: nginx:alpine
    container_name: cooling-manager-nginx-prod
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - frontend_dist:/usr/share/nginx/html:ro
    depends_on:
      - backend
      - frontend
    networks:
      - cooling-manager-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Log Management (Optional)
  logrotate:
    image: linkyard/docker-logrotate
    container_name: cooling-manager-logrotate
    restart: unless-stopped
    volumes:
      - ./logs:/logs
      - ./nginx/logs:/nginx-logs
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      LOGS_DIRECTORIES: "/logs /nginx-logs"
      LOGROTATE_INTERVAL: daily
      LOGROTATE_COPIES: 7
    networks:
      - cooling-manager-network

  # Database Backup (Optional)
  db-backup:
    image: postgres:15-alpine
    container_name: cooling-manager-backup
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-cooling_password}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - postgres
    networks:
      - cooling-manager-network
    command: /backup.sh
    profiles:
      - backup

  # Monitoring (Optional - Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: cooling-manager-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cooling-manager-network
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: cooling-manager-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - cooling-manager-network
    profiles:
      - monitoring

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  frontend_dist:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  cooling-manager-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Production deployment commands:
# 1. Copy .env.example to .env and configure production values
# 2. docker-compose -f docker-compose.prod.yml up -d
# 3. docker-compose -f docker-compose.prod.yml exec backend npm run db:migrate
# 4. docker-compose -f docker-compose.prod.yml exec backend npm run db:seed
#
# Optional services:
# - Enable monitoring: docker-compose -f docker-compose.prod.yml --profile monitoring up -d
# - Run backup: docker-compose -f docker-compose.prod.yml --profile backup up db-backup
#
# Scaling:
# - Scale backend: docker-compose -f docker-compose.prod.yml up -d --scale backend=3
# - Scale frontend: docker-compose -f docker-compose.prod.yml up -d --scale frontend=2
