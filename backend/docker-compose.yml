version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cooling-manager-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: cooling_manager
      POSTGRES_USER: cooling_user
      POSTGRES_PASSWORD: cooling_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - cooling-manager-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cooling_user -d cooling_manager"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (for caching and session storage)
  redis:
    image: redis:7-alpine
    container_name: cooling-manager-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cooling-manager-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cooling-manager-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://cooling_user:cooling_password@postgres:5432/cooling_manager?schema=public
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-this-in-production}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      ENABLE_SENSOR_SIMULATION: "true"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cooling-manager-network
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: cooling-manager-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - cooling-manager-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  cooling-manager-network:
    driver: bridge
